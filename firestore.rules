rules_version = '2';
service cloud.firestore {
	function isUnchanged(key) {
    return (key in resource.data) 
      && (key in request.resource.data) 
      && (resource.data[key] == request.resource.data[key]);
  }
  
  function isContentOwner(userId) {
  	return userId == request.auth.uid;
  }
  
  function noNewFieldsAdded() {
  	return request.resource.data.keys() == resource.data.keys();
  }
  
  match /databases/{database}/documents {
    match /users/{id} {
    	allow read: if isContentOwner(id);
      allow create: if request.auth != null && isContentOwner(id);
      allow update: if request.auth != null
      	&& isContentOwner(id)
      	&& noNewFieldsAdded()
      	&& isUnchanged("email")
        && isUnchanged("id")
        && isUnchanged("lastSignInTime")
        && isUnchanged("registeredDate");
    }
    
    match /favorites/{id} {
    	allow read, delete: if isContentOwner(resource.data.userId);
      allow create: if request.auth != null;
    }
    
    match /prevGames/{id} {
    	allow read, delete: if isContentOwner(resource.data.userId);
      allow create: if request.auth != null;
    }

    // The admin SDK bypasses this rule
    match /metadata/storiesCount {
    	allow read: if true;
      allow write, update, delete: if false;
    }

    // The admin SDK bypasses this rule
    match /stories/{id} {
      allow read: if request.auth != null;
    }
  }
}